/// <reference types="node" />
/// <reference types="@project-serum/anchor/node_modules/@solana/web3.js" />
/// <reference types="@pythnetwork/client/node_modules/@solana/web3.js" />
import { Connection, PublicKey } from "@solana/web3.js";
import BigNumber from "bignumber.js";
import SwitchboardProgram from "@switchboard-xyz/sbv2-lite";
import { PoolType, ReserveType } from "../types";
import { Reserve } from "../../state";
export declare function fetchPools(oldPools: Array<PoolType>, connection: Connection, switchboardProgram: SwitchboardProgram, programId: string, currentSlot: number, debug?: boolean): Promise<{
    [k: string]: {
        name: string | null;
        address: string;
        authorityAddress: string;
        reserves: ReserveType[];
        owner: string;
    };
}>;
export declare function formatReserve(reserve: {
    pubkey: PublicKey;
    info: Reserve;
}, price: {
    spotPrice: number;
    emaPrice: number;
} | undefined, currentSlot: number): {
    disabled: boolean;
    cumulativeBorrowRate: BigNumber;
    cTokenExchangeRate: BigNumber;
    reserveUtilization: BigNumber;
    cTokenMint: string;
    feeReceiverAddress: string;
    reserveSupplyLimit: BigNumber;
    reserveBorrowLimit: BigNumber;
    borrowFee: BigNumber;
    flashLoanFee: BigNumber;
    protocolLiquidationFee: number;
    hostFee: number;
    interestRateSpread: number;
    reserveSupplyCap: BigNumber;
    reserveBorrowCap: BigNumber;
    targetBorrowApr: number;
    targetUtilization: number;
    maxUtilizationRate: number;
    minBorrowApr: number;
    maxBorrowApr: number;
    superMaxBorrowRate: number;
    supplyInterest: BigNumber;
    borrowInterest: BigNumber;
    totalSupply: BigNumber;
    totalBorrow: BigNumber;
    availableAmount: BigNumber;
    rateLimiter: {
        remainingOutflow: BigNumber | null;
        config: {
            windowDuration: BigNumber;
            maxOutflow: BigNumber;
        };
        windowStart: BigNumber;
        previousQuantity: BigNumber;
        currentQuantity: BigNumber;
    };
    totalSupplyUsd: BigNumber;
    totalBorrowUsd: BigNumber;
    availableAmountUsd: BigNumber;
    loanToValueRatio: number;
    liquidationThreshold: number;
    maxLiquidationThreshold: number;
    liquidationPenalty: number;
    maxLiquidationPenalty: number;
    liquidityAddress: string;
    cTokenLiquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    address: string;
    mintAddress: string;
    decimals: number;
    symbol: undefined;
    price: BigNumber;
    poolAddress: string;
    pythOracle: string;
    switchboardOracle: string;
    addedBorrowWeightBPS: import("bn.js");
    borrowWeight: number;
    emaPrice: number | undefined;
    minPrice: BigNumber;
    maxPrice: BigNumber;
};
export declare const getReservesOfPool: (lendingMarketPubkey: PublicKey, connection: Connection, programId: string, currentSlot: number, switchboardProgram?: SwitchboardProgram, debug?: boolean) => Promise<{
    disabled: boolean;
    cumulativeBorrowRate: BigNumber;
    cTokenExchangeRate: BigNumber;
    reserveUtilization: BigNumber;
    cTokenMint: string;
    feeReceiverAddress: string;
    reserveSupplyLimit: BigNumber;
    reserveBorrowLimit: BigNumber;
    borrowFee: BigNumber;
    flashLoanFee: BigNumber;
    protocolLiquidationFee: number;
    hostFee: number;
    interestRateSpread: number;
    reserveSupplyCap: BigNumber;
    reserveBorrowCap: BigNumber;
    targetBorrowApr: number;
    targetUtilization: number;
    maxUtilizationRate: number;
    minBorrowApr: number;
    maxBorrowApr: number;
    superMaxBorrowRate: number;
    supplyInterest: BigNumber;
    borrowInterest: BigNumber;
    totalSupply: BigNumber;
    totalBorrow: BigNumber;
    availableAmount: BigNumber;
    rateLimiter: {
        remainingOutflow: BigNumber | null;
        config: {
            windowDuration: BigNumber;
            maxOutflow: BigNumber;
        };
        windowStart: BigNumber;
        previousQuantity: BigNumber;
        currentQuantity: BigNumber;
    };
    totalSupplyUsd: BigNumber;
    totalBorrowUsd: BigNumber;
    availableAmountUsd: BigNumber;
    loanToValueRatio: number;
    liquidationThreshold: number;
    maxLiquidationThreshold: number;
    liquidationPenalty: number;
    maxLiquidationPenalty: number;
    liquidityAddress: string;
    cTokenLiquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    address: string;
    mintAddress: string;
    decimals: number;
    symbol: undefined;
    price: BigNumber;
    poolAddress: string;
    pythOracle: string;
    switchboardOracle: string;
    addedBorrowWeightBPS: import("bn.js");
    borrowWeight: number;
    emaPrice: number | undefined;
    minPrice: BigNumber;
    maxPrice: BigNumber;
}[]>;
export declare const getReservesFromChain: (connection: Connection, switchboardProgram: SwitchboardProgram, programId: string, currentSlot: number, debug?: boolean) => Promise<{
    disabled: boolean;
    cumulativeBorrowRate: BigNumber;
    cTokenExchangeRate: BigNumber;
    reserveUtilization: BigNumber;
    cTokenMint: string;
    feeReceiverAddress: string;
    reserveSupplyLimit: BigNumber;
    reserveBorrowLimit: BigNumber;
    borrowFee: BigNumber;
    flashLoanFee: BigNumber;
    protocolLiquidationFee: number;
    hostFee: number;
    interestRateSpread: number;
    reserveSupplyCap: BigNumber;
    reserveBorrowCap: BigNumber;
    targetBorrowApr: number;
    targetUtilization: number;
    maxUtilizationRate: number;
    minBorrowApr: number;
    maxBorrowApr: number;
    superMaxBorrowRate: number;
    supplyInterest: BigNumber;
    borrowInterest: BigNumber;
    totalSupply: BigNumber;
    totalBorrow: BigNumber;
    availableAmount: BigNumber;
    rateLimiter: {
        remainingOutflow: BigNumber | null;
        config: {
            windowDuration: BigNumber;
            maxOutflow: BigNumber;
        };
        windowStart: BigNumber;
        previousQuantity: BigNumber;
        currentQuantity: BigNumber;
    };
    totalSupplyUsd: BigNumber;
    totalBorrowUsd: BigNumber;
    availableAmountUsd: BigNumber;
    loanToValueRatio: number;
    liquidationThreshold: number;
    maxLiquidationThreshold: number;
    liquidationPenalty: number;
    maxLiquidationPenalty: number;
    liquidityAddress: string;
    cTokenLiquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    address: string;
    mintAddress: string;
    decimals: number;
    symbol: undefined;
    price: BigNumber;
    poolAddress: string;
    pythOracle: string;
    switchboardOracle: string;
    addedBorrowWeightBPS: import("bn.js");
    borrowWeight: number;
    emaPrice: number | undefined;
    minPrice: BigNumber;
    maxPrice: BigNumber;
}[]>;
export declare function fetchPoolByAddress(poolAddress: string, connection: Connection, debug?: boolean): Promise<{
    pubkey: PublicKey;
    account: {
        executable: boolean;
        owner: PublicKey;
        lamports: number;
        data: Buffer;
        rentEpoch?: number | undefined;
    };
    info: Reserve;
} | null>;
